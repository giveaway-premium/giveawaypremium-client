{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/display-name */\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport { Form, Row, Col, Layout, Input, Button, Spin, Descriptions, Tabs, Table, Radio, Popconfirm } from 'antd';\nimport { images } from \"../../../../../../../config/images\";\nimport MyModal from \"../../../../../../Components/MyModal\";\nimport { showNotification, numberWithCommas } from \"../../../../../../../common/function\";\nimport { LoadingOutlined, SearchOutlined } from '@ant-design/icons';\nimport { Router } from \"../../../../../../../common/routes\";\nimport { isMobile } from 'react-device-detect';\nimport \"./style.scss\";\nimport Lottie from 'react-lottie';\nimport GapService from \"../../../../../../../controller/Api/Services/Gap\";\nimport { isEqual } from 'lodash';\nimport moment from 'moment';\nimport Highlighter from 'react-highlight-words';\n\nconst EditableRow = function (_ref) {\n  let {\n    index\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"index\"]);\n\n  const [form] = Form.useForm();\n  return __jsx(Form, {\n    form: form,\n    component: false\n  }, __jsx(EditableContext.Provider, {\n    value: form\n  }, __jsx(\"tr\", props)));\n};\n\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableCell = function (_ref2) {\n  let {\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave\n  } = _ref2,\n      restProps = _objectWithoutProperties(_ref2, [\"title\", \"editable\", \"children\", \"dataIndex\", \"record\", \"handleSave\"]);\n\n  const {\n    0: editing,\n    1: setEditing\n  } = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(function () {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = function () {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async function () {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave(_objectSpread({}, record, values));\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? __jsx(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }]\n    }, __jsx(Input, {\n      ref: inputRef,\n      onPressEnter: save,\n      onBlur: save\n    })) : __jsx(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit\n    }, children);\n  }\n\n  return __jsx(\"td\", restProps, childNode);\n};\n\nclass TableConsignemntScreen extends React.PureComponent {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    _defineProperty(this, \"getColumnSearchProps\", function (dataIndex) {\n      return {\n        filterDropdown: function ({\n          setSelectedKeys,\n          selectedKeys,\n          confirm,\n          clearFilters\n        }) {\n          return __jsx(\"div\", {\n            style: {\n              padding: 8\n            }\n          }, __jsx(Input, {\n            ref: function (node) {\n              _this.searchInput = node;\n            },\n            placeholder: `Tìm số điện thoại`,\n            value: selectedKeys[0],\n            onChange: function (e) {\n              return setSelectedKeys(e.target.value ? [e.target.value] : []);\n            },\n            onPressEnter: function () {\n              return _this.handleSearch(selectedKeys, confirm, dataIndex);\n            },\n            style: {\n              width: 188,\n              marginBottom: 8,\n              display: 'block'\n            }\n          }), __jsx(Button, {\n            type: \"primary\",\n            onClick: function () {\n              return _this.handleSearch(selectedKeys, confirm, dataIndex);\n            },\n            icon: __jsx(SearchOutlined, null),\n            size: \"small\",\n            style: {\n              width: '100%'\n            }\n          }, \"T\\xECm ki\\u1EBFm\"));\n        },\n        filterIcon: function (filtered) {\n          return __jsx(SearchOutlined, {\n            style: {\n              color: filtered ? '#1890ff' : undefined\n            }\n          });\n        },\n        onFilterDropdownVisibleChange: function (visible) {\n          if (visible) {\n            setTimeout(function () {\n              return _this.searchInput.select();\n            }, 100);\n          }\n        },\n        render: function (text) {\n          return _this.state.searchedColumn === dataIndex ? __jsx(Highlighter, {\n            highlightStyle: {\n              backgroundColor: '#ffc069',\n              padding: 0\n            },\n            searchWords: [_this.state.searchText],\n            autoEscape: true,\n            textToHighlight: text ? text.toString() : ''\n          }) : text;\n        }\n      };\n    });\n\n    _defineProperty(this, \"handleSearch\", function (selectedKeys, confirm, dataIndex) {\n      console.log('handleSearch');\n      console.log(selectedKeys); // confirm()\n      // this.fetchTableData(1, selectedKeys[0])\n\n      _this.setState({\n        searchText: selectedKeys[0],\n        searchedColumn: dataIndex\n      }, function () {\n        confirm();\n      });\n    });\n\n    _defineProperty(this, \"onChangeRadioIsGetMoney\", async function (row) {\n      console.log('onChangeRadioIsGetMoney');\n      console.log(row);\n      const newData = [..._this.state.customerData];\n      const index = newData.findIndex(function (item) {\n        return row.objectId === item.objectId;\n      });\n      const item = newData[index];\n\n      const newItem = _objectSpread({}, item, row);\n\n      if (!isEqual(newItem, item)) {\n        newData.splice(index, 1, newItem);\n        console.log('row');\n\n        _this.setState({\n          customerData: newData\n        }, async function () {\n          console.log(newItem);\n          const res = await GapService.updateCustomerTable(newItem);\n          console.log(res);\n\n          if (res) {\n            showNotification(`Cập nhật thành công ${item.phoneNumber}`);\n          } else {\n            showNotification(`Cập nhật chưa được`);\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"fetchTableData\", async function (page = 1) {\n      const {\n        searchText\n      } = _this.state;\n\n      _this.setState({\n        isLoadingData: true\n      }, async function () {\n        let res;\n\n        if (!searchText) {\n          res = await GapService.getCustomerTable(page);\n        } else {\n          res = await GapService.getCustomerTable(page, searchText);\n        }\n\n        console.log('res');\n        console.log(res);\n        let customerData = [];\n\n        if (res && res.results) {\n          res.results.map(function (item, indexItem) {\n            customerData.push({\n              key: indexItem,\n              objectId: item.objectId,\n              fullName: item.fullName,\n              identityNumber: item.identityNumber,\n              phoneNumber: item.phoneNumber,\n              bankName: item.banks[0].type,\n              bankId: item.banks[0].accNumber,\n              email: item.mail,\n              birthday: moment(item.birthday).format('DD-MM-YYYY')\n            });\n          });\n\n          _this.setState({\n            total: res.count,\n            customerData: customerData,\n            isLoadingData: false\n          });\n        } else {\n          _this.setState({\n            isLoadingData: false\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleSave\", function (row) {\n      const newData = [..._this.state.customerData];\n      const index = newData.findIndex(function (item) {\n        return row.key === item.key;\n      });\n      const item = newData[index];\n\n      const newItem = _objectSpread({}, item, row);\n\n      if (!isEqual(newItem, item)) {\n        newData.splice(index, 1, newItem);\n        console.log('row');\n\n        _this.setState({\n          customerData: newData\n        }, async function () {\n          console.log(newItem);\n          const res = await GapService.updateCustomerTable(newItem);\n          console.log(res);\n\n          if (res) {\n            showNotification(`Cập nhật thành công ${item.phoneNumber}`);\n          } else {\n            showNotification(`Cập nhật chưa được`);\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"paginationChange\", function (page) {\n      console.log(page);\n\n      _this.fetchTableData(page);\n    });\n\n    this.columns = [{\n      title: 'Tên khách hàng',\n      width: 15,\n      dataIndex: 'fullName',\n      key: 'fullName',\n      editable: true\n    }, _objectSpread({\n      title: 'Số điện thoại',\n      dataIndex: 'phoneNumber',\n      key: 'phoneNumber',\n      width: 10,\n      editable: true\n    }, this.getColumnSearchProps('phoneNumber')), {\n      title: 'Mail',\n      dataIndex: 'email',\n      key: 'email',\n      width: 15,\n      editable: true\n    }, {\n      title: 'Sinh nhật',\n      dataIndex: 'birthday',\n      key: 'birthday',\n      width: 10\n    }, {\n      title: 'CMND',\n      dataIndex: 'identityNumber',\n      key: 'identityNumber',\n      width: 10,\n      editable: true\n    }, {\n      title: 'Ngân hàng',\n      dataIndex: 'bankName',\n      key: 'bankName',\n      width: 10,\n      editable: true\n    }, {\n      title: 'ID Ngân hàng',\n      dataIndex: 'bankId',\n      key: 'bankId',\n      width: 10,\n      editable: true\n    } // {\n    //   title: 'Nhận tiền',\n    //   key: '7',\n    //   fixed: 'right',\n    //   width: 5,\n    //   render: (value) =>\n    //     this.state.customerData.length >= 1 ? (\n    //       <Popconfirm title='Xác nhận' onConfirm={() => this.onChangeRadioIsGetMoney(value)}>\n    //         <Radio.Button className={value.isGetMoney ? 'radio-true-isGetMoney' : 'radio-false-isGetMoney'} value={value.isGetMoney}>{value.isGetMoney ? 'Rồi' : 'Chưa'}</Radio.Button>\n    //       </Popconfirm>\n    //     ) : null\n    // }\n    ];\n    this.state = {\n      customerData: [],\n      total: 0,\n      page: 1,\n      searchText: '',\n      searchedColumn: ''\n    };\n    this.myModal = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchTableData();\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    var _this2 = this;\n\n    const {\n      userData\n    } = this.props;\n    const {\n      isLoadingData,\n      customerData,\n      total\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(function (col) {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: function (record) {\n          return {\n            record,\n            editable: col.editable,\n            dataIndex: col.dataIndex,\n            title: col.title,\n            handleSave: _this2.handleSave\n          };\n        }\n      });\n    });\n    return __jsx(\"div\", {\n      className: \"tableConsignemntScreen-container\"\n    }, __jsx(Table, {\n      components: components,\n      size: \"small\",\n      loading: isLoadingData,\n      columns: columns,\n      dataSource: customerData,\n      bordered: true,\n      pagination: {\n        total: total,\n        pageSize: 20,\n        onChange: this.paginationChange\n      },\n      scroll: {\n        x: 1500,\n        y: '65vh'\n      }\n    }), __jsx(MyModal, {\n      ref: this.myModal\n    }));\n  }\n\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    locale: state.locale,\n    userData: state.userData\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, null)(TableConsignemntScreen));","map":{"version":3,"sources":["/Users/macbook/Desktop/giveawaypremium-client/pages/Screen/DashBoard/components/ManageScreen/comppnents/TableCustomer/index.js"],"names":["React","useContext","useState","useEffect","useRef","withRouter","connect","Form","Row","Col","Layout","Input","Button","Spin","Descriptions","Tabs","Table","Radio","Popconfirm","images","MyModal","showNotification","numberWithCommas","LoadingOutlined","SearchOutlined","Router","isMobile","Lottie","GapService","isEqual","moment","Highlighter","EditableRow","index","props","form","useForm","EditableContext","createContext","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","TableConsignemntScreen","PureComponent","constructor","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","searchInput","e","target","value","handleSearch","width","marginBottom","display","filterIcon","filtered","color","undefined","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","state","searchedColumn","backgroundColor","searchText","toString","setState","row","newData","customerData","findIndex","item","objectId","newItem","splice","res","updateCustomerTable","phoneNumber","page","isLoadingData","getCustomerTable","results","map","indexItem","push","key","fullName","identityNumber","bankName","banks","type","bankId","accNumber","email","mail","birthday","format","total","count","fetchTableData","columns","getColumnSearchProps","myModal","createRef","componentDidMount","componentDidUpdate","userData","components","body","cell","col","onCell","pageSize","onChange","paginationChange","x","y","mapStateToProps","locale"],"mappings":"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","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { useContext, useState, useEffect, useRef } from 'react'\nimport { withRouter } from 'next/router'\nimport { connect } from 'react-redux'\nimport { Form, Row, Col, Layout, Input, Button, Spin, Descriptions, Tabs, Table, Radio, Popconfirm } from 'antd'\nimport { images } from 'config/images'\nimport MyModal from 'pages/Components/MyModal'\nimport { showNotification, numberWithCommas } from 'common/function'\nimport { LoadingOutlined,  SearchOutlined } from '@ant-design/icons'\nimport { Router } from 'common/routes'\nimport { isMobile } from 'react-device-detect'\nimport './style.scss'\nimport Lottie from 'react-lottie'\nimport GapService from 'controller/Api/Services/Gap'\nimport { isEqual } from 'lodash'\nimport moment from 'moment'\nimport Highlighter from 'react-highlight-words'\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm()\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  )\n}\n\nconst EditableContext = React.createContext(null)\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false)\n  const inputRef = useRef(null)\n  const form = useContext(EditableContext)\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus()\n    }\n  }, [editing])\n\n  const toggleEdit = () => {\n    setEditing(!editing)\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    })\n  }\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields()\n      toggleEdit()\n      handleSave({ ...record, ...values })\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo)\n    }\n  }\n\n  let childNode = children\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`\n          }\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className='editable-cell-value-wrap'\n        style={{\n          paddingRight: 24\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  return <td {...restProps}>{childNode}</td>\n}\n\nclass TableConsignemntScreen extends React.PureComponent {\n  constructor (props) {\n    super(props)\n    this.columns = [\n      {\n        title: 'Tên khách hàng',\n        width: 15,\n        dataIndex: 'fullName',\n        key: 'fullName',\n        editable: true\n      },\n      {\n        title: 'Số điện thoại',\n        dataIndex: 'phoneNumber',\n        key: 'phoneNumber',\n        width: 10,\n        editable: true,\n        ...this.getColumnSearchProps('phoneNumber')\n      },\n      {\n        title: 'Mail',\n        dataIndex: 'email',\n        key: 'email',\n        width: 15,\n        editable: true\n      },\n      {\n        title: 'Sinh nhật',\n        dataIndex: 'birthday',\n        key: 'birthday',\n        width: 10\n      },\n      {\n        title: 'CMND',\n        dataIndex: 'identityNumber',\n        key: 'identityNumber',\n        width: 10,\n        editable: true\n      },\n      {\n        title: 'Ngân hàng',\n        dataIndex: 'bankName',\n        key: 'bankName',\n        width: 10,\n        editable: true\n      },\n      {\n        title: 'ID Ngân hàng',\n        dataIndex: 'bankId',\n        key: 'bankId',\n        width: 10,\n        editable: true\n      }\n      // {\n      //   title: 'Nhận tiền',\n      //   key: '7',\n      //   fixed: 'right',\n      //   width: 5,\n      //   render: (value) =>\n      //     this.state.customerData.length >= 1 ? (\n      //       <Popconfirm title='Xác nhận' onConfirm={() => this.onChangeRadioIsGetMoney(value)}>\n      //         <Radio.Button className={value.isGetMoney ? 'radio-true-isGetMoney' : 'radio-false-isGetMoney'} value={value.isGetMoney}>{value.isGetMoney ? 'Rồi' : 'Chưa'}</Radio.Button>\n      //       </Popconfirm>\n      //     ) : null\n      // }\n    ]\n    this.state = {\n      customerData: [],\n      total: 0,\n      page: 1,\n      searchText: '',\n      searchedColumn: ''\n    }\n    this.myModal = React.createRef()\n  }\n\n  componentDidMount () {\n    this.fetchTableData()\n  }\n\n  componentDidUpdate () {\n\n  }\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node\n          }}\n          placeholder={`Tìm số điện thoại`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        {/* <Space> */}\n        <Button\n          type='primary'\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon={<SearchOutlined />}\n          size='small'\n          style={{ width: '100%' }}\n        >\n            Tìm kiếm\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select(), 100)\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ) : (\n        text\n      )\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    console.log('handleSearch')\n    console.log(selectedKeys)\n\n    // confirm()\n    // this.fetchTableData(1, selectedKeys[0])\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex\n    }, () => {\n      confirm()\n    })\n  };\n\n  onChangeRadioIsGetMoney = async (row) => {\n    console.log('onChangeRadioIsGetMoney')\n    console.log(row)\n\n    const newData = [...this.state.customerData]\n    const index = newData.findIndex((item) => row.objectId === item.objectId)\n    const item = newData[index]\n    const newItem = { ...item, ...row }\n \n    if (!isEqual(newItem, item)) {\n      newData.splice(index, 1, newItem)\n      console.log('row')\n      this.setState({\n        customerData: newData\n      }, async () => {\n        console.log(newItem)\n        const res = await GapService.updateCustomerTable(newItem)\n        console.log(res)\n        if (res) {\n          showNotification(`Cập nhật thành công ${item.phoneNumber}`)\n        } else {\n          showNotification(`Cập nhật chưa được`)\n        }\n      })\n    }\n  }\n\n  fetchTableData = async (page = 1) => {\n    const { searchText } = this.state\n\n    this.setState({\n      isLoadingData: true\n    }, async () => {\n      let res\n      if (!searchText) {\n        res = await GapService.getCustomerTable(page)\n      } else {\n        res = await GapService.getCustomerTable(page, searchText)\n      }\n\n      console.log('res')\n      console.log(res)\n      let customerData = []\n      if (res && res.results) {\n        res.results.map((item, indexItem) => {\n          customerData.push({\n            key: indexItem,\n            objectId: item.objectId,\n            fullName: item.fullName,\n            identityNumber: item.identityNumber,\n            phoneNumber: item.phoneNumber,\n            bankName: item.banks[0].type,\n            bankId: item.banks[0].accNumber,\n            email: item.mail,\n            birthday: moment(item.birthday).format('DD-MM-YYYY')\n          })\n        })\n        this.setState({\n          total: res.count,\n          customerData: customerData,\n          isLoadingData: false\n        })\n      } else {\n        this.setState({\n          isLoadingData: false\n        })\n      }\n    })\n  }\n\n  handleSave = (row) => {\n    const newData = [...this.state.customerData]\n    const index = newData.findIndex((item) => row.key === item.key)\n    const item = newData[index]\n    const newItem = { ...item, ...row }\n\n    if (!isEqual(newItem, item)) {\n      newData.splice(index, 1, newItem)\n      console.log('row')\n      this.setState({\n        customerData: newData\n      }, async () => {\n        console.log(newItem)\n        const res = await GapService.updateCustomerTable(newItem)\n        console.log(res)\n        if (res) {\n          showNotification(`Cập nhật thành công ${item.phoneNumber}`)\n        } else {\n          showNotification(`Cập nhật chưa được`)\n        }\n      })\n    }\n  };\n\n  paginationChange = (page) => {\n    console.log(page)\n    this.fetchTableData(page)\n  }\n\n  render () {\n    const { userData } = this.props\n    const { isLoadingData, customerData, total } = this.state\n\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    }\n\n    const columns = this.columns.map((col) => {\n      if (!col.editable) {\n        return col\n      }\n\n      return {\n        ...col,\n        onCell: (record) => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      }\n    })\n\n    return (\n      <div className='tableConsignemntScreen-container'>\n        <Table\n          components={components}\n          size='small'\n          loading={isLoadingData}\n          columns={columns}\n          dataSource={customerData}\n          bordered\n          pagination={{\n            total: total,\n            pageSize: 20,\n            onChange: this.paginationChange\n          }}\n          scroll={{ x: 1500, y: '65vh' }}\n        />\n        <MyModal ref={this.myModal} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  locale: state.locale,\n  userData: state.userData\n})\n\nexport default withRouter(connect(mapStateToProps, null)(TableConsignemntScreen))\n"]},"metadata":{},"sourceType":"module"}