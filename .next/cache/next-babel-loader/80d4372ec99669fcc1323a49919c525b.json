{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport storeRedux from \"../controller/Redux/store/configureStore\";\nimport PageReduxAction from \"../controller/Redux/actions/pageActions\";\nimport StorageActions from \"../controller/Redux/actions/storageActions\";\nimport { showNotification, getCurrentBrowserLanguage } from \"./function\";\n\nconst window = require('global/window');\n\nexport default class ReduxServices {\n  static async callDispatchAction(action) {\n    storeRedux.dispatch(action);\n  }\n\n  static async refreshInternet(isConnect, isChange) {\n    const {\n      locale\n    } = storeRedux.getState();\n    const {\n      messages\n    } = locale;\n\n    if (isConnect) {\n      isChange && showNotification(messages.warnInternerOnline);\n    } else {\n      showNotification(messages.warnInternerOffline);\n    }\n\n    ReduxServices.callDispatchAction(PageReduxAction.setInternet(isConnect));\n  }\n\n  static detectBrowserLanguage() {\n    const lang = window.pantographLanguage || getCurrentBrowserLanguage();\n    ReduxServices.callDispatchAction(StorageActions.setLocale(lang));\n  }\n\n  static getCurrentLang() {\n    const {\n      locale\n    } = storeRedux.getState();\n    return locale.lang || 'en';\n  }\n\n  static getLocale() {\n    const {\n      locale\n    } = storeRedux.getState();\n    return locale || {};\n  }\n\n  static getCurrentNetwork() {\n    const {\n      network\n    } = storeRedux.getState();\n    return network || 1;\n  }\n\n  static checkIsSigned() {\n    const {\n      userData\n    } = storeRedux.getState();\n\n    if (userData && userData.token) {\n      return true;\n    }\n\n    return false;\n  }\n\n  static setTransferData(transferData) {\n    ReduxServices.callDispatchAction(StorageActions.setTransferData(_objectSpread({}, transferData)));\n  }\n\n  static loginWalletConnect(tokenJWT, chainId, callback = null, callbackErr = null) {}\n\n  static changePositionBackGround() {\n    (function () {\n      // Add event listener\n      document.addEventListener('mousemove', parallax);\n      const elem = document.querySelector('#parallax'); // Magic happens here\n\n      function parallax(e) {\n        // let _w = window.innerWidth / 2\n        // let _h = window.innerHeight / 2\n        // let _mouseX = e.clientX\n        // let _mouseY = e.clientY\n        let _depth1 = `50%  50%`;\n        let _depth2 = `50%  50%`;\n        let _depth3 = `50%  50%`;\n        let x = `${_depth3}, ${_depth2}, ${_depth1}`; // console.log(x)\n\n        elem.style.backgroundPosition = x;\n      }\n    })();\n  }\n\n  static getAuthKeyBearer() {\n    const {\n      userData\n    } = storeRedux.getState();\n\n    if (userData && userData.token) {\n      return userData.token;\n    } else {\n      return '';\n    }\n  }\n\n  static setUserToken(result) {\n    const {\n      userData\n    } = storeRedux.getState();\n\n    if (result && result.sessionToken) {\n      ReduxServices.callDispatchAction(StorageActions.setUserData(_objectSpread({}, userData, {\n        token: result.sessionToken,\n        name: result.fullName,\n        objectId: result.objectId\n      })));\n    }\n  }\n\n  static deleteUserToken() {\n    ReduxServices.callDispatchAction(StorageActions.setUserData({}));\n  }\n\n  static async detectConnection(baseUrl) {// const { walletConnect } = storeRedux.getState()\n  }\n\n  static getConnection(chainId) {}\n\n  static updateConnection(data) {}\n\n  static removeConnection(chainId) {} //\n\n\n  static async refreshTokensHolding() {}\n\n  static async getGasPrice() {}\n\n  static async getGasCurrent() {}\n\n  static async getETHTokensHolding(address) {}\n\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/giveawaypremium-client/common/redux.js"],"names":["storeRedux","PageReduxAction","StorageActions","showNotification","getCurrentBrowserLanguage","window","require","ReduxServices","callDispatchAction","action","dispatch","refreshInternet","isConnect","isChange","locale","getState","messages","warnInternerOnline","warnInternerOffline","setInternet","detectBrowserLanguage","lang","pantographLanguage","setLocale","getCurrentLang","getLocale","getCurrentNetwork","network","checkIsSigned","userData","token","setTransferData","transferData","loginWalletConnect","tokenJWT","chainId","callback","callbackErr","changePositionBackGround","document","addEventListener","parallax","elem","querySelector","e","_depth1","_depth2","_depth3","x","style","backgroundPosition","getAuthKeyBearer","setUserToken","result","sessionToken","setUserData","name","fullName","objectId","deleteUserToken","detectConnection","baseUrl","getConnection","updateConnection","data","removeConnection","refreshTokensHolding","getGasPrice","getGasCurrent","getETHTokensHolding","address"],"mappings":"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","sourcesContent":["\nimport storeRedux from 'controller/Redux/store/configureStore'\nimport PageReduxAction from 'controller/Redux/actions/pageActions'\nimport StorageActions from 'controller/Redux/actions/storageActions'\nimport { showNotification, getCurrentBrowserLanguage } from './function'\nconst window = require('global/window')\n\nexport default class ReduxServices {\n  static async callDispatchAction (action) {\n    storeRedux.dispatch(action)\n  }\n\n  static async refreshInternet (isConnect, isChange) {\n    const { locale } = storeRedux.getState()\n    const { messages } = locale\n\n    if (isConnect) {\n      isChange && showNotification(messages.warnInternerOnline)\n    } else {\n      showNotification(messages.warnInternerOffline)\n    }\n\n    ReduxServices.callDispatchAction(PageReduxAction.setInternet(isConnect))\n  }\n\n  static detectBrowserLanguage () {\n    const lang = window.pantographLanguage || getCurrentBrowserLanguage()\n    ReduxServices.callDispatchAction(StorageActions.setLocale(lang))\n  }\n\n  static getCurrentLang () {\n    const { locale } = storeRedux.getState()\n    return locale.lang || 'en'\n  }\n\n  static getLocale () {\n    const { locale } = storeRedux.getState()\n    return locale || {}\n  }\n\n  static getCurrentNetwork () {\n    const { network } = storeRedux.getState()\n    return network || 1\n  }\n\n  static checkIsSigned () {\n    const { userData } = storeRedux.getState()\n\n    if (userData && userData.token) {\n      return true\n    }\n\n    return false\n  }\n\n  static setTransferData (transferData) {\n    ReduxServices.callDispatchAction(StorageActions.setTransferData({ ...transferData }))\n  }\n\n  static loginWalletConnect (tokenJWT, chainId, callback = null, callbackErr = null) {\n\n  }\n\n  static changePositionBackGround () {\n    (function () {\n      // Add event listener\n      document.addEventListener('mousemove', parallax)\n      const elem = document.querySelector('#parallax')\n      // Magic happens here\n      function parallax (e) {\n        // let _w = window.innerWidth / 2\n        // let _h = window.innerHeight / 2\n        // let _mouseX = e.clientX\n        // let _mouseY = e.clientY\n        let _depth1 = `50%  50%`\n        let _depth2 = `50%  50%`\n        let _depth3 = `50%  50%`\n        let x = `${_depth3}, ${_depth2}, ${_depth1}`\n        // console.log(x)\n        elem.style.backgroundPosition = x\n      }\n    })()\n  }\n\n  static getAuthKeyBearer () {\n    const { userData } = storeRedux.getState()\n    if (userData && userData.token) {\n      return userData.token\n    } else {\n      return ''\n    }\n  }\n\n  static setUserToken (result) {\n    const { userData } = storeRedux.getState()\n\n    if (result && result.sessionToken) {\n      ReduxServices.callDispatchAction(StorageActions.setUserData({ ...userData, token: result.sessionToken, name: result.fullName, objectId: result.objectId }))\n    }\n  }\n\n  static deleteUserToken () {\n    ReduxServices.callDispatchAction(StorageActions.setUserData({}))\n  }\n\n  static async detectConnection (baseUrl) {\n    // const { walletConnect } = storeRedux.getState()\n  }\n\n  static getConnection (chainId) {\n  }\n\n  static updateConnection (data) {\n  }\n\n  static removeConnection (chainId) {\n  }\n\n  //\n  static async refreshTokensHolding () {\n  }\n\n  static async getGasPrice () {\n\n  }\n\n  static async getGasCurrent () {\n  }\n\n  static async getETHTokensHolding (address) {\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}