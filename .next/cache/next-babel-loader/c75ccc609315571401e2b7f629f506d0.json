{"ast":null,"code":"import _Object$freeze from \"@babel/runtime-corejs2/core-js/object/freeze\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar events = require('events');\n\nvar eventEmitter = new events.EventEmitter();\n\nvar Observer = /*#__PURE__*/function () {\n  function Observer() {\n    _classCallCheck(this, Observer);\n\n    this.listObserver = [];\n  }\n\n  _createClass(Observer, [{\n    key: \"on\",\n    value: function on(key, func) {\n      eventEmitter.on(key, func);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(key, object) {\n      eventEmitter.emit(key, object);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(key, func) {\n      eventEmitter.removeListener(key, func);\n    }\n  }]);\n\n  return Observer;\n}();\n\nvar instance = new Observer();\n\n_Object$freeze(instance);\n\nexport default instance;","map":{"version":3,"sources":["/Users/macbook/Desktop/giveawaypremium-client/common/observer.js"],"names":["events","require","eventEmitter","EventEmitter","Observer","listObserver","key","func","on","object","emit","removeListener","instance"],"mappings":";;;;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,YAAY,GAAG,IAAIF,MAAM,CAACG,YAAX,EAAnB;;IAEMC,Q;AACJ,sBAAe;AAAA;;AACb,SAAKC,YAAL,GAAoB,EAApB;AACD;;;;WAED,YAAIC,GAAJ,EAASC,IAAT,EAAe;AACbL,MAAAA,YAAY,CAACM,EAAb,CAAgBF,GAAhB,EAAqBC,IAArB;AACD;;;WAED,cAAMD,GAAN,EAAWG,MAAX,EAAmB;AACjBP,MAAAA,YAAY,CAACQ,IAAb,CAAkBJ,GAAlB,EAAuBG,MAAvB;AACD;;;WAED,wBAAgBH,GAAhB,EAAqBC,IAArB,EAA2B;AACzBL,MAAAA,YAAY,CAACS,cAAb,CAA4BL,GAA5B,EAAiCC,IAAjC;AACD;;;;;;AAGH,IAAMK,QAAQ,GAAG,IAAIR,QAAJ,EAAjB;;AACA,eAAcQ,QAAd;;AAEA,eAAeA,QAAf","sourcesContent":["var events = require('events')\nvar eventEmitter = new events.EventEmitter()\n\nclass Observer {\n  constructor () {\n    this.listObserver = []\n  }\n\n  on (key, func) {\n    eventEmitter.on(key, func)\n  }\n\n  emit (key, object) {\n    eventEmitter.emit(key, object)\n  }\n\n  removeListener (key, func) {\n    eventEmitter.removeListener(key, func)\n  }\n}\n\nconst instance = new Observer()\nObject.freeze(instance)\n\nexport default instance\n"]},"metadata":{},"sourceType":"module"}