{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { REQUEST_TYPE } from \"../../../common/constants\";\nimport ReduxService from \"../../../common/redux\";\nimport QueryString from 'query-string';\nexport default class Gap {\n  static logInAdmin(username, password) {\n    const queryBody = {\n      username: username,\n      password: password\n    };\n    return this.fetchData('/login', REQUEST_TYPE.GET, queryBody, null, null, null, null, true);\n  } // Appointment\n\n\n  static async getAppointmentWithDate(dateArray) {\n    const customQuery = `where={\"date\":{\"$in\":[${[...dateArray]}]}}`;\n    return this.fetchData('/classes/AppointmentSchedule', REQUEST_TYPE.GET, null, null, null, null, customQuery);\n  }\n\n  static async getAppointmentWithSlotId(slotID) {\n    const customQuery = `where={\"slot\":${slotID}}`;\n    return this.fetchData('/classes/AppointmentSchedule', REQUEST_TYPE.GET, null, null, null, null, customQuery);\n  }\n\n  static async setAppointment(formData, slotID, formatedTime, formatedDay) {\n    const res = await this.getAppointmentWithSlotId(slotID);\n\n    if (res && res.results && res.results.length === 0) {\n      const body = {\n        slot: slotID,\n        date: formatedDay,\n        dateTime: formatedTime,\n        agency: {\n          '__type': 'Pointer',\n          'className': 'Agency',\n          'objectId': 'KcPHTActcd'\n        },\n        // we need set more agency after\n        customerName: formData.customerName,\n        phoneNumber: formData.phoneNumber,\n        numberOfProduct: `${formData.numberOfProduct}`\n      };\n      return this.fetchData('/classes/AppointmentSchedule', REQUEST_TYPE.POST, null, body);\n    } else {\n      return false;\n    }\n  } // Consignment Group\n\n\n  static async getConsignmentID() {\n    const queryBody = {\n      count: true\n    };\n    return this.fetchData('/classes/ConsignmentGroup', REQUEST_TYPE.GET, queryBody);\n  }\n\n  static async setConsignmentID(tag) {\n    const body = {\n      code: tag.code,\n      timeGetMoney: tag.timeGetMoney\n    };\n    return this.fetchData('/classes/ConsignmentGroup', REQUEST_TYPE.POST, null, body);\n  }\n\n  static async deleteConsignmentID(objectId) {\n    try {\n      return this.fetchData(`/classes/ConsignmentGroup/${objectId}`, REQUEST_TYPE.DELETE, null);\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  } // Consignment\n\n\n  static async setConsignment(formData, consigneeData, consignerData, timeGroupId) {\n    const body = {\n      consignmentId: formData.consignmentId,\n      consignerName: formData.consignerName,\n      consignerIdCard: formData.consignerIdCard,\n      consignee: {\n        '__type': 'Pointer',\n        'className': '_User',\n        'objectId': consigneeData\n      },\n      consigner: {\n        '__type': 'Pointer',\n        'className': '_User',\n        'objectId': consignerData\n      },\n      group: {\n        '__type': 'Pointer',\n        'className': 'ConsignmentGroup',\n        'objectId': timeGroupId\n      },\n      consigneeName: formData.consigneeName,\n      phoneNumber: formData.phoneNumber,\n      numberOfProducts: Number(formData.numberOfProducts),\n      timeGetMoney: formData.timeGetMoney || '',\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    };\n    console.log('body setConsignment');\n    console.log(body);\n    return this.fetchData('/classes/Consignment', REQUEST_TYPE.POST, null, body);\n  }\n\n  static async getConsignment(page = 1, keyword = null, limit = 20) {\n    let skip = 20 * page - 20;\n    const queryBody = {\n      limit: limit,\n      skip: skip,\n      count: true\n    };\n\n    if (keyword) {\n      const customQuery = `where={\"phoneNumber\":{\"$regex\":\"${keyword}\"}}`;\n      return this.fetchData('/classes/Consignment', REQUEST_TYPE.GET, queryBody, null, null, null, customQuery);\n    } else {\n      return this.fetchData('/classes/Consignment', REQUEST_TYPE.GET, queryBody);\n    }\n  }\n\n  static async updateConsignment(item) {\n    try {\n      const body = {\n        consignmentId: item.consignmentId,\n        numberOfProducts: Number(item.numberOfProducts),\n        numSoldConsignment: Number(item.numSoldConsignment || 0),\n        remainNumConsignment: Number(item.numberOfProducts) - Number(item.numSoldConsignment || 0),\n        moneyBack: Number(item.moneyBack) || 0,\n        isGetMoney: item.isGetMoney || false,\n        timeGetMoney: item.timeGetMoney || ''\n      };\n      console.log('body update consignment', body);\n      console.log('item update consignment', item);\n      return this.fetchData(`/classes/Consignment/${item.objectId}`, REQUEST_TYPE.PUT, null, body);\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  } // Customer\n\n\n  static async setCustomer(formData) {\n    const body = {\n      fullName: formData.consignerName,\n      phoneNumber: formData.phoneNumber,\n      identityNumber: formData.consignerIdCard,\n      mail: formData.mail,\n      email: formData.mail || 'nothing@giveaway.com',\n      birthday: formData.birthday,\n      username: formData.username,\n      password: formData.password,\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    };\n    return this.fetchData('/classes/_User', REQUEST_TYPE.POST, null, body);\n  }\n\n  static async updateCustomerTable(formData) {\n    const body = {\n      fullName: formData.fullName,\n      phoneNumber: formData.phoneNumber,\n      identityNumber: formData.identityNumber,\n      mail: formData.mail,\n      birthday: formData.birthday,\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    };\n    return this.fetchData(`/classes/_User/${formData.objectId}`, REQUEST_TYPE.PUT, null, body, null, null, null, true);\n  }\n\n  static async updateCustomer(formData, objectId) {\n    const body = {\n      fullName: formData.consignerName,\n      phoneNumber: formData.phoneNumber,\n      identityNumber: formData.consignerIdCard,\n      mail: formData.mail,\n      birthday: formData.birthday,\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    };\n    return this.fetchData(`/classes/_User/${objectId}`, REQUEST_TYPE.PUT, null, body, null, null, null, true);\n  }\n\n  static async getCustomerTable(page = 1, keyword = null) {\n    let limit = 20;\n    let skip = 20 * page - 20;\n    const queryBody = {\n      limit: limit,\n      skip: skip,\n      count: true\n    };\n\n    if (keyword) {\n      const customQuery = `where={\"role\":\"customer\",\"phoneNumber\":{\"$regex\":\"${keyword}\"}}`;\n      return this.fetchData('/classes/_User', REQUEST_TYPE.GET, queryBody, null, null, null, customQuery);\n    } else {\n      const customQuery = `where={\"role\":\"customer\"}`;\n      return this.fetchData('/classes/_User', REQUEST_TYPE.GET, queryBody, null, null, null, customQuery);\n    }\n  }\n\n  static async getCustomer(phoneNumber) {\n    const customQuery = `where={\"phoneNumber\":\"${phoneNumber.toString()}\"}`;\n    return this.fetchData('/classes/_User', REQUEST_TYPE.GET, null, null, null, null, customQuery);\n  }\n\n  static async fetchData(apiUrl, method, queryBody, postData, hostLink, authKey = '', customQuery = null, isUseAuthKey = false) {\n    try {\n      const key = authKey || (await ReduxService.getAuthKeyBearer());\n      const HOST = hostLink || process.env.SERVER_URL;\n      let header = {\n        'X-Parse-Application-Id': process.env.APP_ID,\n        'X-Parse-REST-API-Key': process.env.REST_API_KEY\n      };\n\n      if (isUseAuthKey) {\n        header = {\n          'X-Parse-Application-Id': process.env.APP_ID,\n          'X-Parse-REST-API-Key': process.env.REST_API_KEY,\n          'X-Parse-Session-Token': `${key}`\n        };\n      }\n\n      let params = {\n        method: method || REQUEST_TYPE.GET,\n        headers: header\n      };\n\n      if (postData) {\n        params.body = _JSON$stringify(postData);\n      }\n\n      let queryStr = queryBody ? '?' + QueryString.stringify(queryBody) : '';\n\n      if (customQuery) {\n        queryStr = `?${encodeURI(customQuery)}`;\n      }\n\n      const response = await fetch(HOST + apiUrl + queryStr, params);\n      const responJson = await response.json();\n      return responJson || response;\n    } catch (error) {\n      return null;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/giveawaypremium-client/controller/Api/Services/Gap.js"],"names":["REQUEST_TYPE","ReduxService","QueryString","Gap","logInAdmin","username","password","queryBody","fetchData","GET","getAppointmentWithDate","dateArray","customQuery","getAppointmentWithSlotId","slotID","setAppointment","formData","formatedTime","formatedDay","res","results","length","body","slot","date","dateTime","agency","customerName","phoneNumber","numberOfProduct","POST","getConsignmentID","count","setConsignmentID","tag","code","timeGetMoney","deleteConsignmentID","objectId","DELETE","e","console","log","setConsignment","consigneeData","consignerData","timeGroupId","consignmentId","consignerName","consignerIdCard","consignee","consigner","group","consigneeName","numberOfProducts","Number","banks","type","bankName","accNumber","bankId","getConsignment","page","keyword","limit","skip","updateConsignment","item","numSoldConsignment","remainNumConsignment","moneyBack","isGetMoney","PUT","setCustomer","fullName","identityNumber","mail","email","birthday","updateCustomerTable","updateCustomer","getCustomerTable","getCustomer","toString","apiUrl","method","postData","hostLink","authKey","isUseAuthKey","key","getAuthKeyBearer","HOST","process","env","SERVER_URL","header","APP_ID","REST_API_KEY","params","headers","queryStr","stringify","encodeURI","response","fetch","responJson","json","error"],"mappings":"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","sourcesContent":["\nimport { REQUEST_TYPE } from 'common/constants'\nimport ReduxService from 'common/redux'\nimport QueryString from 'query-string'\n\nexport default class Gap {\n  static logInAdmin (username, password) {\n    const queryBody = {\n      username: username,\n      password: password\n    }\n\n    return this.fetchData('/login', REQUEST_TYPE.GET, queryBody, null, null, null, null, true)\n  }\n\n  // Appointment\n\n  static async getAppointmentWithDate (dateArray) {\n    const customQuery = `where={\"date\":{\"$in\":[${[...dateArray]}]}}`\n    return this.fetchData('/classes/AppointmentSchedule', REQUEST_TYPE.GET, null, null, null, null, customQuery)\n  }\n\n  static async getAppointmentWithSlotId (slotID) {\n    const customQuery = `where={\"slot\":${slotID}}`\n    return this.fetchData('/classes/AppointmentSchedule', REQUEST_TYPE.GET, null, null, null, null, customQuery)\n  }\n\n  static async setAppointment (formData, slotID, formatedTime, formatedDay) {\n    const res = await this.getAppointmentWithSlotId(slotID)\n\n    if (res && res.results && res.results.length === 0) {\n      const body = {\n        slot: slotID,\n        date: formatedDay,\n        dateTime: formatedTime,\n        agency: { '__type': 'Pointer', 'className': 'Agency', 'objectId': 'KcPHTActcd' }, // we need set more agency after\n        customerName: formData.customerName,\n        phoneNumber: formData.phoneNumber,\n        numberOfProduct: `${formData.numberOfProduct}`\n      }\n      return this.fetchData('/classes/AppointmentSchedule', REQUEST_TYPE.POST, null, body)\n    } else {\n      return false\n    }\n  }\n\n  // Consignment Group\n\n  static async getConsignmentID () {\n    const queryBody = {\n      count: true\n    }\n    return this.fetchData('/classes/ConsignmentGroup', REQUEST_TYPE.GET, queryBody)\n  }\n\n  static async setConsignmentID (tag) {\n    const body = {\n      code: tag.code,\n      timeGetMoney: tag.timeGetMoney\n    }\n    return this.fetchData('/classes/ConsignmentGroup', REQUEST_TYPE.POST, null, body)\n  }\n\n  static async deleteConsignmentID (objectId) {\n    try {\n      return this.fetchData(`/classes/ConsignmentGroup/${objectId}`, REQUEST_TYPE.DELETE, null)\n    } catch (e) {\n      console.log(e)\n      return false\n    }\n  }\n\n  // Consignment\n  static async setConsignment (formData, consigneeData, consignerData, timeGroupId) {\n    const body = {\n      consignmentId: formData.consignmentId,\n      consignerName: formData.consignerName,\n      consignerIdCard: formData.consignerIdCard,\n      consignee: { '__type': 'Pointer', 'className': '_User', 'objectId': consigneeData },\n      consigner: { '__type': 'Pointer', 'className': '_User', 'objectId': consignerData },\n      group: { '__type': 'Pointer', 'className': 'ConsignmentGroup', 'objectId': timeGroupId },\n      consigneeName: formData.consigneeName,\n      phoneNumber: formData.phoneNumber,\n      numberOfProducts: Number(formData.numberOfProducts),\n      timeGetMoney: formData.timeGetMoney || '',\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    }\n    console.log('body setConsignment')\n    console.log(body)\n    return this.fetchData('/classes/Consignment', REQUEST_TYPE.POST, null, body)\n  }\n\n  static async getConsignment (page = 1, keyword = null, limit = 20) {\n    let skip = (20 * page) - 20\n\n    const queryBody = {\n      limit: limit,\n      skip: skip,\n      count: true\n    }\n\n    if (keyword) {\n      const customQuery = `where={\"phoneNumber\":{\"$regex\":\"${keyword}\"}}`\n      return this.fetchData('/classes/Consignment', REQUEST_TYPE.GET, queryBody, null, null, null, customQuery)\n    } else {\n      return this.fetchData('/classes/Consignment', REQUEST_TYPE.GET, queryBody)\n    }\n  }\n\n  static async updateConsignment (item) {\n    try {\n      const body = {\n        consignmentId: item.consignmentId,\n        numberOfProducts: Number(item.numberOfProducts),\n        numSoldConsignment: Number(item.numSoldConsignment || 0),\n        remainNumConsignment: Number(item.numberOfProducts) - Number(item.numSoldConsignment || 0),\n        moneyBack: Number(item.moneyBack) || 0,\n        isGetMoney: item.isGetMoney || false,\n        timeGetMoney: item.timeGetMoney || ''\n      }\n\n      console.log('body update consignment', body)\n      console.log('item update consignment', item)\n\n      return this.fetchData(`/classes/Consignment/${item.objectId}`, REQUEST_TYPE.PUT, null, body)\n    } catch (e) {\n      console.log(e)\n      return false\n    }\n  }\n\n  // Customer\n  static async setCustomer (formData) {\n    const body = {\n      fullName: formData.consignerName,\n      phoneNumber: formData.phoneNumber,\n      identityNumber: formData.consignerIdCard,\n      mail: formData.mail,\n      email: formData.mail || 'nothing@giveaway.com',\n      birthday: formData.birthday,\n      username: formData.username,\n      password: formData.password,\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    }\n    return this.fetchData('/classes/_User', REQUEST_TYPE.POST, null, body)\n  }\n\n  static async updateCustomerTable (formData) {\n    const body = {\n      fullName: formData.fullName,\n      phoneNumber: formData.phoneNumber,\n      identityNumber: formData.identityNumber,\n      mail: formData.mail,\n      birthday: formData.birthday,\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    }\n\n    return this.fetchData(`/classes/_User/${formData.objectId}`, REQUEST_TYPE.PUT, null, body, null, null, null, true)\n  }\n\n  static async updateCustomer (formData, objectId) {\n    const body = {\n      fullName: formData.consignerName,\n      phoneNumber: formData.phoneNumber,\n      identityNumber: formData.consignerIdCard,\n      mail: formData.mail,\n      birthday: formData.birthday,\n      banks: [{\n        type: formData.bankName,\n        accNumber: formData.bankId\n      }]\n    }\n    return this.fetchData(`/classes/_User/${objectId}`, REQUEST_TYPE.PUT, null, body, null, null, null, true)\n  }\n\n  static async getCustomerTable (page = 1, keyword = null) {\n    let limit = 20\n    let skip = (20 * page) - 20\n\n    const queryBody = {\n      limit: limit,\n      skip: skip,\n      count: true\n    }\n\n    if (keyword) {\n      const customQuery = `where={\"role\":\"customer\",\"phoneNumber\":{\"$regex\":\"${keyword}\"}}`\n      return this.fetchData('/classes/_User', REQUEST_TYPE.GET, queryBody, null, null, null, customQuery)\n    } else {\n      const customQuery = `where={\"role\":\"customer\"}`\n      return this.fetchData('/classes/_User', REQUEST_TYPE.GET, queryBody, null, null, null, customQuery)\n    }\n  }\n\n  static async getCustomer (phoneNumber) {\n    const customQuery = `where={\"phoneNumber\":\"${phoneNumber.toString()}\"}`\n\n    return this.fetchData('/classes/_User', REQUEST_TYPE.GET, null, null, null, null, customQuery)\n  }\n\n  static async fetchData (apiUrl, method, queryBody, postData, hostLink, authKey = '', customQuery = null, isUseAuthKey = false) {\n    try {\n      const key = authKey || await ReduxService.getAuthKeyBearer()\n      const HOST = hostLink || process.env.SERVER_URL\n\n      let header = {\n        'X-Parse-Application-Id': process.env.APP_ID,\n        'X-Parse-REST-API-Key': process.env.REST_API_KEY\n      }\n\n      if (isUseAuthKey) {\n        header = {\n          'X-Parse-Application-Id': process.env.APP_ID,\n          'X-Parse-REST-API-Key': process.env.REST_API_KEY,\n          'X-Parse-Session-Token': `${key}`\n        }\n      }\n\n      let params = {\n        method: method || REQUEST_TYPE.GET,\n        headers: header\n      }\n\n      if (postData) {\n        params.body = JSON.stringify(postData)\n      }\n\n      let queryStr = queryBody\n        ? '?' + QueryString.stringify(queryBody)\n        : ''\n\n      if (customQuery) {\n        queryStr = `?${encodeURI(customQuery)}`\n      }\n      const response = await fetch(HOST + apiUrl + queryStr, params)\n      const responJson = await response.json()\n      return responJson || response\n    } catch (error) {\n      return null\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}