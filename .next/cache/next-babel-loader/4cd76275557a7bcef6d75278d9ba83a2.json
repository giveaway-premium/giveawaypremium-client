{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport storeRedux from \"../controller/Redux/store/configureStore\";\nimport PageReduxAction from \"../controller/Redux/actions/pageActions\";\nimport StorageActions from \"../controller/Redux/actions/storageActions\";\nimport { showNotification, getCurrentBrowserLanguage } from \"./function\";\n\nvar window = require('global/window');\n\nvar ReduxServices = /*#__PURE__*/function () {\n  function ReduxServices() {\n    _classCallCheck(this, ReduxServices);\n  }\n\n  _createClass(ReduxServices, null, [{\n    key: \"callDispatchAction\",\n    value: function () {\n      var _callDispatchAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(action) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                storeRedux.dispatch(action);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function callDispatchAction(_x) {\n        return _callDispatchAction.apply(this, arguments);\n      }\n\n      return callDispatchAction;\n    }()\n  }, {\n    key: \"refreshInternet\",\n    value: function () {\n      var _refreshInternet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(isConnect, isChange) {\n        var _storeRedux$getState, locale, messages;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _storeRedux$getState = storeRedux.getState(), locale = _storeRedux$getState.locale;\n                messages = locale.messages;\n\n                if (isConnect) {\n                  isChange && showNotification(messages.warnInternerOnline);\n                } else {\n                  showNotification(messages.warnInternerOffline);\n                }\n\n                ReduxServices.callDispatchAction(PageReduxAction.setInternet(isConnect));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function refreshInternet(_x2, _x3) {\n        return _refreshInternet.apply(this, arguments);\n      }\n\n      return refreshInternet;\n    }()\n  }, {\n    key: \"detectBrowserLanguage\",\n    value: function detectBrowserLanguage() {\n      var lang = window.pantographLanguage || getCurrentBrowserLanguage();\n      ReduxServices.callDispatchAction(StorageActions.setLocale(lang));\n    }\n  }, {\n    key: \"getCurrentLang\",\n    value: function getCurrentLang() {\n      var _storeRedux$getState2 = storeRedux.getState(),\n          locale = _storeRedux$getState2.locale;\n\n      return locale.lang || 'en';\n    }\n  }, {\n    key: \"getLocale\",\n    value: function getLocale() {\n      var _storeRedux$getState3 = storeRedux.getState(),\n          locale = _storeRedux$getState3.locale;\n\n      return locale || {};\n    }\n  }, {\n    key: \"getCurrentNetwork\",\n    value: function getCurrentNetwork() {\n      var _storeRedux$getState4 = storeRedux.getState(),\n          network = _storeRedux$getState4.network;\n\n      return network || 1;\n    }\n  }, {\n    key: \"checkIsSigned\",\n    value: function checkIsSigned() {\n      var _storeRedux$getState5 = storeRedux.getState(),\n          userData = _storeRedux$getState5.userData;\n\n      if (userData && userData.token) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"setTransferData\",\n    value: function setTransferData(transferData) {\n      ReduxServices.callDispatchAction(StorageActions.setTransferData(_objectSpread({}, transferData)));\n    }\n  }, {\n    key: \"loginWalletConnect\",\n    value: function loginWalletConnect(tokenJWT, chainId) {\n      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var callbackErr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    }\n  }, {\n    key: \"changePositionBackGround\",\n    value: function changePositionBackGround() {\n      (function () {\n        // Add event listener\n        document.addEventListener('mousemove', parallax);\n        var elem = document.querySelector('#parallax'); // Magic happens here\n\n        function parallax(e) {\n          // let _w = window.innerWidth / 2\n          // let _h = window.innerHeight / 2\n          // let _mouseX = e.clientX\n          // let _mouseY = e.clientY\n          var _depth1 = \"50%  50%\";\n          var _depth2 = \"50%  50%\";\n          var _depth3 = \"50%  50%\";\n          var x = \"\".concat(_depth3, \", \").concat(_depth2, \", \").concat(_depth1); // console.log(x)\n\n          elem.style.backgroundPosition = x;\n        }\n      })();\n    }\n  }, {\n    key: \"getAuthKeyBearer\",\n    value: function getAuthKeyBearer() {\n      var _storeRedux$getState6 = storeRedux.getState(),\n          userData = _storeRedux$getState6.userData;\n\n      if (userData && userData.token) {\n        return userData.token;\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"setUserToken\",\n    value: function setUserToken(result) {\n      var _storeRedux$getState7 = storeRedux.getState(),\n          userData = _storeRedux$getState7.userData;\n\n      if (result && result.sessionToken) {\n        ReduxServices.callDispatchAction(StorageActions.setUserData(_objectSpread({}, userData, {\n          token: result.sessionToken,\n          name: result.fullName,\n          objectId: result.objectId\n        })));\n      }\n    }\n  }, {\n    key: \"deleteUserToken\",\n    value: function deleteUserToken() {\n      ReduxServices.callDispatchAction(StorageActions.setUserData({}));\n    }\n  }, {\n    key: \"detectConnection\",\n    value: function () {\n      var _detectConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(baseUrl) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function detectConnection(_x4) {\n        return _detectConnection.apply(this, arguments);\n      }\n\n      return detectConnection;\n    }()\n  }, {\n    key: \"getConnection\",\n    value: function getConnection(chainId) {}\n  }, {\n    key: \"updateConnection\",\n    value: function updateConnection(data) {}\n  }, {\n    key: \"removeConnection\",\n    value: function removeConnection(chainId) {} //\n\n  }, {\n    key: \"refreshTokensHolding\",\n    value: function () {\n      var _refreshTokensHolding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function refreshTokensHolding() {\n        return _refreshTokensHolding.apply(this, arguments);\n      }\n\n      return refreshTokensHolding;\n    }()\n  }, {\n    key: \"getGasPrice\",\n    value: function () {\n      var _getGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getGasPrice() {\n        return _getGasPrice.apply(this, arguments);\n      }\n\n      return getGasPrice;\n    }()\n  }, {\n    key: \"getGasCurrent\",\n    value: function () {\n      var _getGasCurrent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getGasCurrent() {\n        return _getGasCurrent.apply(this, arguments);\n      }\n\n      return getGasCurrent;\n    }()\n  }, {\n    key: \"getETHTokensHolding\",\n    value: function () {\n      var _getETHTokensHolding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(address) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getETHTokensHolding(_x5) {\n        return _getETHTokensHolding.apply(this, arguments);\n      }\n\n      return getETHTokensHolding;\n    }()\n  }]);\n\n  return ReduxServices;\n}();\n\nexport { ReduxServices as default };","map":{"version":3,"sources":["/Users/macbook/Desktop/giveawaypremium-client/common/redux.js"],"names":["storeRedux","PageReduxAction","StorageActions","showNotification","getCurrentBrowserLanguage","window","require","ReduxServices","action","dispatch","isConnect","isChange","getState","locale","messages","warnInternerOnline","warnInternerOffline","callDispatchAction","setInternet","lang","pantographLanguage","setLocale","network","userData","token","transferData","setTransferData","tokenJWT","chainId","callback","callbackErr","document","addEventListener","parallax","elem","querySelector","e","_depth1","_depth2","_depth3","x","style","backgroundPosition","result","sessionToken","setUserData","name","fullName","objectId","baseUrl","data","address"],"mappings":"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","sourcesContent":["\nimport storeRedux from 'controller/Redux/store/configureStore'\nimport PageReduxAction from 'controller/Redux/actions/pageActions'\nimport StorageActions from 'controller/Redux/actions/storageActions'\nimport { showNotification, getCurrentBrowserLanguage } from './function'\nconst window = require('global/window')\n\nexport default class ReduxServices {\n  static async callDispatchAction (action) {\n    storeRedux.dispatch(action)\n  }\n\n  static async refreshInternet (isConnect, isChange) {\n    const { locale } = storeRedux.getState()\n    const { messages } = locale\n\n    if (isConnect) {\n      isChange && showNotification(messages.warnInternerOnline)\n    } else {\n      showNotification(messages.warnInternerOffline)\n    }\n\n    ReduxServices.callDispatchAction(PageReduxAction.setInternet(isConnect))\n  }\n\n  static detectBrowserLanguage () {\n    const lang = window.pantographLanguage || getCurrentBrowserLanguage()\n    ReduxServices.callDispatchAction(StorageActions.setLocale(lang))\n  }\n\n  static getCurrentLang () {\n    const { locale } = storeRedux.getState()\n    return locale.lang || 'en'\n  }\n\n  static getLocale () {\n    const { locale } = storeRedux.getState()\n    return locale || {}\n  }\n\n  static getCurrentNetwork () {\n    const { network } = storeRedux.getState()\n    return network || 1\n  }\n\n  static checkIsSigned () {\n    const { userData } = storeRedux.getState()\n\n    if (userData && userData.token) {\n      return true\n    }\n\n    return false\n  }\n\n  static setTransferData (transferData) {\n    ReduxServices.callDispatchAction(StorageActions.setTransferData({ ...transferData }))\n  }\n\n  static loginWalletConnect (tokenJWT, chainId, callback = null, callbackErr = null) {\n\n  }\n\n  static changePositionBackGround () {\n    (function () {\n      // Add event listener\n      document.addEventListener('mousemove', parallax)\n      const elem = document.querySelector('#parallax')\n      // Magic happens here\n      function parallax (e) {\n        // let _w = window.innerWidth / 2\n        // let _h = window.innerHeight / 2\n        // let _mouseX = e.clientX\n        // let _mouseY = e.clientY\n        let _depth1 = `50%  50%`\n        let _depth2 = `50%  50%`\n        let _depth3 = `50%  50%`\n        let x = `${_depth3}, ${_depth2}, ${_depth1}`\n        // console.log(x)\n        elem.style.backgroundPosition = x\n      }\n    })()\n  }\n\n  static getAuthKeyBearer () {\n    const { userData } = storeRedux.getState()\n    if (userData && userData.token) {\n      return userData.token\n    } else {\n      return ''\n    }\n  }\n\n  static setUserToken (result) {\n    const { userData } = storeRedux.getState()\n\n    if (result && result.sessionToken) {\n      ReduxServices.callDispatchAction(StorageActions.setUserData({ ...userData, token: result.sessionToken, name: result.fullName, objectId: result.objectId }))\n    }\n  }\n\n  static deleteUserToken () {\n    ReduxServices.callDispatchAction(StorageActions.setUserData({}))\n  }\n\n  static async detectConnection (baseUrl) {\n    // const { walletConnect } = storeRedux.getState()\n  }\n\n  static getConnection (chainId) {\n  }\n\n  static updateConnection (data) {\n  }\n\n  static removeConnection (chainId) {\n  }\n\n  //\n  static async refreshTokensHolding () {\n  }\n\n  static async getGasPrice () {\n\n  }\n\n  static async getGasCurrent () {\n  }\n\n  static async getETHTokensHolding (address) {\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}